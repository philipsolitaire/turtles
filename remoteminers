local modem_side = "right"
local ID = os.getComputerID()
rednet.open(modem_side)
 
local id, com
while true do
print(ID.." is listening...")
id, com =  rednet.receive("21112001")
if com == "update()" then
        print("update complete...")
        shell.run("rm startup")
        sleep(0.4)
        local data = http.get("https://raw.githubusercontent.com/philipsolitaire/turtles/main/remoteminers").readAll()
        file = fs.open("startup","w")
        file.write(data)
        file.close()
        shell.run("startup")
elseif com == "place()" then
        turtle.place()
elseif com:sub(1,5) == "drain" then
        print("draining...")
        local length, depth = com:match("(%d+),(%d+)")
        if length~=nil and depth~=nil then
        for d=1,depth,1 do
        turtle.digDown()
        sleep(0.6)
        turtle.placeDown()
        turtle.digDown()
        sleep(0.6)
        turtle.down()
        sleep(0.4)
        for l=1,length,1 do
        turtle.dig()
        sleep(0.6)
        turtle.place()
        turtle.dig()
        sleep(0.6)
        turtle.forward()
        sleep(0.4)
        end
        turtle.turnLeft()
        sleep(0.4)
        turtle.turnLeft()
        sleep(0.4)
        end
        end
elseif com:sub(1,8) == "excavate" then
        print("excavating...")
        local length, depth = com:match("(%d+),(%d+)")
        if length~=nil and depth~=nil then
        for d=1,depth,1 do
        turtle.digDown()
        sleep(0.6)
        turtle.down()
        sleep(0.4)
        for l=1,length,1 do
        turtle.dig()
        sleep(0.6)
        turtle.forward()
        sleep(0.4)
        end
        turtle.turnLeft()
        sleep(0.4)
        turtle.turnLeft()
        sleep(0.4)
        end
        end
elseif com:sub(1,9) == "upscavate" then
        print("upscavating...")
        local length, height = com:match("(%d+),(%d+)")
        if length~=nil and height~=nil then
        for h=1,height,1 do
        turtle.digUp()
        sleep(0.6)
        turtle.up()
        sleep(0.4)
        for l=1,length,1 do
        turtle.dig()
        sleep(0.6)
        turtle.forward()
        sleep(0.4)
        end
        turtle.turnLeft()
        sleep(0.4)
        turtle.turnLeft()
        sleep(0.4)
        end
        end
elseif com == "refuelAll("..ID..")" then
        local fuel = 0
        for index=1,16,1 do
        turtle.select(index)
        fuel = fuel+turtle.getItemCount()
        end
        turtle.select(1)
        fuel = math.floor(fuel/16)
        print("each turtle will get "..fuel)
        local bool, data = turtle.inspect()
        local leftCount = 0
        while data.name~="computercraft:turtle_normal" do
        turtle.turnLeft()
        leftCount = leftCount + 1
        bool, data = turtle.inspect()
        end
        turtle.refuel(fuel)
        turtle.up()
        turtle.forward()
        local item_count
        for var=1,15,1 do
        while turtle.getItemCount() == 0 and turtle.getSelectedSlot()~=16 do
        turtle.select(turtle.getSelectedSlot()+1)
        end     
        item_count = turtle.getItemCount()
        if item_count < fuel and turtle.getSelectedSlot()~=16 then
        turtle.dropDown(item_count)
        turtle.select(turtle.getSelectedSlot()+1)
        turtle.dropDown(fuel-item_count)
        else
        turtle.dropDown(fuel)
        end
        turtle.forward()
        end
        turtle.turnLeft()
        turtle.turnLeft()
        for var=1,16,1 do
        turtle.forward()
        end
        turtle.down()
        for var = 1,leftCount,1 do
        turtle.turnRight()
        end
        for index=1,16,1 do
        turtle.select(index)
        turtle.refuel()
        end
        turtle.select(1)
        rednet.broadcast("refuel()","21112001")
elseif com == "fold("..ID..")" then 
        rednet.broadcast("dump()","21112001")
        for index=1,16,1 do
        turtle.select(index)
        turtle.drop()
        end
        turtle.select(1)
        local bool, data = turtle.inspect()
        while data.name~="computercraft:turtle_normal" do
        turtle.turnLeft()
        bool, data = turtle.inspect()
        end
        while data.name=="computercraft:turtle_normal" do
        turtle.dig()
        turtle.forward()
        bool, data = turtle.inspect()
        end
elseif com == "unfold("..ID..")" then
        turtle.back()
        local count 
        local computer
        for index=1,16,1 do
        turtle.select(index)
        count = turtle.getItemCount() 
        if count~=0 then
        turtle.place()
        sleep(0.4)
        peripheral.call("front","turnOn")
        sleep(0.4)
        turtle.back()
        end
        end
        turtle.select(1)
        turtle.forward()
        turtle.forward()
elseif com == "drop()" then
        turtle.drop()
elseif com == "dump()" then
        for index=1,16,1 do
        turtle.select(index)
        turtle.drop()
        end
        turtle.select(1)
elseif com == "ping()" then
        print("pong")
elseif com == "refuel()" then
        for index=1,16,1 do
        turtle.select(index)
        turtle.refuel()
        end
        turtle.select(1)
elseif com == "forward()" then
        turtle.forward()
elseif com == "dig()" then
        turtle.dig()
elseif com == "digDown()" then
        turtle.digDown()
elseif com == "turnLeft()" then
        turtle.turnLeft()
elseif com == "turnRight()" then
        turtle.turnRight()
elseif com == "up()" then
        turtle.up()
elseif com == "down()" then
        turtle.down()
end
com = nil
end
